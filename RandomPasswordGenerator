<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Generator</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
            color: #333;
        }
        
        .container {
            background-color: white;
            border-radius: 8px;
            padding: 30px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        
        .password-display {
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 12px;
            font-family: monospace;
            font-size: 18px;
            margin-bottom: 20px;
            text-align: center;
            position: relative;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .options {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            margin-bottom: 8px;
        }
        
        .checkbox-group {
            margin-bottom: 15px;
        }
        
        .checkbox-label {
            display: inline-flex;
            align-items: center;
            margin-right: 15px;
            cursor: pointer;
        }
        
        input[type="checkbox"] {
            margin-right: 5px;
        }
        
        input[type="range"] {
            width: 100%;
            margin-bottom: 10px;
        }
        
        .length-display {
            text-align: center;
            font-weight: bold;
            margin-bottom: 15px;
        }
        
        .button-group {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }
        
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            flex: 1;
            transition: background-color 0.2s;
        }
        
        button:hover {
            background-color: #2980b9;
        }
        
        .copy-btn {
            background-color: #2ecc71;
        }
        
        .copy-btn:hover {
            background-color: #27ae60;
        }
        
        .strength-meter {
            height: 8px;
            background-color: #e0e0e0;
            border-radius: 4px;
            margin-bottom: 10px;
            overflow: hidden;
        }
        
        .strength-bar {
            height: 100%;
            width: 0%;
            transition: width 0.3s, background-color 0.3s;
        }
        
        .strength-text {
            font-size: 14px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .toast {
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #333;
            color: white;
            padding: 10px 20px;
            border-radius: 4px;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 1000;
        }
        
        .show-toast {
            opacity: 1;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Password Generator</h1>
        
        <div class="password-display" id="passwordDisplay">
            Click "Generate" to create a password
        </div>
        
        <div class="strength-meter">
            <div class="strength-bar" id="strengthBar"></div>
        </div>
        <div class="strength-text" id="strengthText">Password strength</div>
        
        <div class="options">
            <label for="lengthSlider">Password Length: <span id="lengthValue">12</span></label>
            <input type="range" id="lengthSlider" min="4" max="64" value="12" class="slider">
            
            <div class="checkbox-group">
                <label class="checkbox-label">
                    <input type="checkbox" id="uppercaseCheck" checked> Uppercase (A-Z)
                </label>
                <label class="checkbox-label">
                    <input type="checkbox" id="lowercaseCheck" checked> Lowercase (a-z)
                </label>
                <label class="checkbox-label">
                    <input type="checkbox" id="numbersCheck" checked> Numbers (0-9)
                </label>
                <label class="checkbox-label">
                    <input type="checkbox" id="symbolsCheck" checked> Symbols (!@#$...)
                </label>
            </div>
        </div>
        
        <div class="button-group">
            <button id="generateBtn">Generate Password</button>
            <button id="copyBtn" class="copy-btn">Copy Password</button>
        </div>
    </div>
    
    <div class="toast" id="toast">Password copied to clipboard!</div>

    <script>
        // DOM Elements
        const passwordDisplay = document.getElementById('passwordDisplay');
        const lengthSlider = document.getElementById('lengthSlider');
        const lengthValue = document.getElementById('lengthValue');
        const uppercaseCheck = document.getElementById('uppercaseCheck');
        const lowercaseCheck = document.getElementById('lowercaseCheck');
        const numbersCheck = document.getElementById('numbersCheck');
        const symbolsCheck = document.getElementById('symbolsCheck');
        const generateBtn = document.getElementById('generateBtn');
        const copyBtn = document.getElementById('copyBtn');
        const toast = document.getElementById('toast');
        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');
        
        // Character sets
        const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const lowercase = 'abcdefghijklmnopqrstuvwxyz';
        const numbers = '0123456789';
        const symbols = '!@#$%^&*()_+-=[]{}|;:\'",.<>/?\\';
        
        // Update length display
        lengthSlider.addEventListener('input', () => {
            lengthValue.textContent = lengthSlider.value;
        });
        
        // Generate password
        generateBtn.addEventListener('click', generatePassword);
        
        // Copy password
        copyBtn.addEventListener('click', () => {
            if (passwordDisplay.textContent !== 'Click "Generate" to create a password') {
                navigator.clipboard.writeText(passwordDisplay.textContent).then(() => {
                    showToast();
                });
            }
        });
        
        // Generate password
        function generatePassword() {
            // Ensure at least one character type is selected
            if (!uppercaseCheck.checked && !lowercaseCheck.checked && 
                !numbersCheck.checked && !symbolsCheck.checked) {
                alert('Please select at least one character type');
                return;
            }
            
            const length = parseInt(lengthSlider.value);
            let charset = '';
            let password = [];
            
            // Add characters from selected types
            if (uppercaseCheck.checked) charset += uppercase;
            if (lowercaseCheck.checked) charset += lowercase;
            if (numbersCheck.checked) charset += numbers;
            if (symbolsCheck.checked) charset += symbols;
            
            // Ensure we have at least one character from each selected type
            if (uppercaseCheck.checked && length > 0) {
                password.push(uppercase.charAt(Math.floor(Math.random() * uppercase.length)));
            }
            
            if (lowercaseCheck.checked && length > password.length) {
                password.push(lowercase.charAt(Math.floor(Math.random() * lowercase.length)));
            }
            
            if (numbersCheck.checked && length > password.length) {
                password.push(numbers.charAt(Math.floor(Math.random() * numbers.length)));
            }
            
            if (symbolsCheck.checked && length > password.length) {
                password.push(symbols.charAt(Math.floor(Math.random() * symbols.length)));
            }
            
            // Fill remaining length with random characters
            while (password.length < length) {
                password.push(charset.charAt(Math.floor(Math.random() * charset.length)));
            }
            
            // Shuffle the array
            password = shuffleArray(password);
            
            // Update display
            const finalPassword = password.join('');
            passwordDisplay.textContent = finalPassword;
            
            // Update strength meter
            updateStrengthMeter(finalPassword);
        }
        
        // Fisher-Yates shuffle algorithm
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
        
        // Show toast message
        function showToast() {
            toast.classList.add('show-toast');
            setTimeout(() => {
                toast.classList.remove('show-toast');
            }, 2000);
        }
        
        // Update password strength meter
        function updateStrengthMeter(password) {
            // Calculate password strength
            let strength = 0;
            const length = password.length;
            
            // Length factor (0-25)
            strength += Math.min(length * 2, 25);
            
            // Character variety factors
            if (/[A-Z]/.test(password)) strength += 10;
            if (/[a-z]/.test(password)) strength += 10;
            if (/[0-9]/.test(password)) strength += 10;
            if (/[^A-Za-z0-9]/.test(password)) strength += 15;
            
            // Complexity patterns
            if (/[A-Z].*[A-Z]/.test(password)) strength += 5;
            if (/[a-z].*[a-z]/.test(password)) strength += 5;
            if (/[0-9].*[0-9]/.test(password)) strength += 5;
            if (/[^A-Za-z0-9].*[^A-Za-z0-9]/.test(password)) strength += 5;
            
            // Adjust final score to be between 0-100
            strength = Math.min(strength, 100);
            
            // Update strength bar
            strengthBar.style.width = strength + '%';
            
            // Set color based on strength
            if (strength < 30) {
                strengthBar.style.backgroundColor = '#ff4d4d'; // Red (weak)
                strengthText.textContent = 'Weak password';
            } else if (strength < 60) {
                strengthBar.style.backgroundColor = '#ffa500'; // Orange (medium)
                strengthText.textContent = 'Medium password';
            } else if (strength < 80) {
                strengthBar.style.backgroundColor = '#2ecc71'; // Green (strong)
                strengthText.textContent = 'Strong password';
            } else {
                strengthBar.style.backgroundColor = '#00aaff'; // Blue (very strong)
                strengthText.textContent = 'Very strong password';
            }
        }
        
        // Generate a password on page load
        generatePassword();
    </script>
</body>
</html>
